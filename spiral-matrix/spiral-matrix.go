package main

import "fmt"

func main() {
	_ = `
  0    1    2    3    4    5    6    7    8    9   10   11
 12   13   14   15   16   17   18   19   20   21   22   23
 24   25   26   27   28   29   30   31   32   33   34   35
 36   37   38   39   40   41   42   43   44   45   46   47
 48   49   50   51   52   53   54   55   56   57   58   59
 60   61   62   63   64   65   66   67   68   69   70   71
 72   73   74   75   76   77   78   79   80   81   82   83
 84   85   86   87   88   89   90   91   92   93   94   95
 96   97   98   99  100  101  102  103  104  105  106  107
108  109  110  111  112  113  114  115  116  117  118  119

0   1   2   3
4   5   6   7
8   9  10  11
    `
	//	a := [][]int{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}, {12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23}, {24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35}, {36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47}, {48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59}, {60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71}, {72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83}, {84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95}, {96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107}, {108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119}}
	//	a := [][]int{{0, 1, 2}, {3, 4, 5}, {6, 7, 8}}
	//	a := [][]int{{0, 1, 2}, {3, 4, 5}, {6, 7, 8}, {9, 10, 11}}
	//	a := [][]int{{0, 1, 2, 3}, {4, 5, 6, 7}, {8, 9, 10, 11}}
	a := [][]int{{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {10, 11, 12, 13, 14, 15, 16, 17, 18, 19}, {20, 21, 22, 23, 24, 25, 26, 27, 28, 29}, {30, 31, 32, 33, 34, 35, 36, 37, 38, 39}, {40, 41, 42, 43, 44, 45, 46, 47, 48, 49}, {50, 51, 52, 53, 54, 55, 56, 57, 58, 59}, {60, 61, 62, 63, 64, 65, 66, 67, 68, 69}, {70, 71, 72, 73, 74, 75, 76, 77, 78, 79}, {80, 81, 82, 83, 84, 85, 86, 87, 88, 89}, {90, 91, 92, 93, 94, 95, 96, 97, 98, 99}}
	b := spiralOrder(a)
	fmt.Println(b)
}

func spiralOrder(matrix [][]int) (ans []int) {
	defer func() { recover() }() // return partial if failed
	n := len(matrix)
	m := len(matrix[0])
	ans = make([]int, n*m)
	var rowUp, rowDown, colLeft, colRight int
	var i, j, cur int
	for cur < n*m {
		for j = colLeft; j < m-colRight; j++ {
			ans[cur] = matrix[rowUp][j]
			cur++
		}
		rowUp += 1
		for i = rowUp; i < n-rowDown; i++ {
			ans[cur] = matrix[i][m-colRight-1]
			cur++
		}
		colRight += 1
		for j = m - colRight - 1; j >= colLeft; j-- {
			ans[cur] = matrix[n-rowDown-1][j]
			cur++
		}
		rowDown += 1
		for i = n - rowDown - 1; i >= rowUp; i-- {
			ans[cur] = matrix[i][colLeft]
			cur++
		}
		colLeft += 1
	}
	return
}
